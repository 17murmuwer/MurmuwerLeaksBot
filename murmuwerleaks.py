import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.types import ParseMode, ReplyKeyboardRemove, ReplyKeyboardMarkup, KeyboardButton
from datetime import datetime
import os
import aiofiles
import aiohttp
from time import time
import phonenumbers as pnumb
from phonenumbers import geocoder, carrier, timezone
import logging
import re
import requests
API_TOKEN = '–°–µ–º–ø–∞–π, —É —Ç-—Ç–µ–±—è —Ç–∞–∫–æ–π –±-–±-–±–æ–ª—å—à–æ–π —Ç–æ–∫–µ–Ω, —Ö–æ—á—É —á—Ç–æ–±—ã —Ç—ã –≤—Å—Ç–∞–≤–∏–ª –µ–≥–æ –≤ –º–µ–Ω—è:)'

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)
dp.middleware.setup(LoggingMiddleware())


async def search_directory(directory, search_text, message):
    total_files = sum(len(files) for _, _, files in os.walk(directory))
    files_checked = 0

    progress_message = await message.answer("üîç –ü–æ–∏—Å–∫ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ... ")
    progress_percent = 0

    for root, dirs, files in os.walk(directory):
        for file_name in files:
            if file_name.endswith(".txt"):
                file_path = os.path.join(root, file_name)
                with open(file_path, "r", encoding="utf-8", errors="ignore") as file:
                    for line in file:
                        if search_text in line:
                            await message.answer(f"üîç –ù–∞–π–¥–µ–Ω–æ –≤: {file_path}\nüìÑ –°—Ç—Ä–æ–∫–∞: {line.strip()}",
                                                 parse_mode=ParseMode.HTML)
            files_checked += 1
            new_progress_percent = int(files_checked / total_files * 100)
            if new_progress_percent != progress_percent:
                progress_percent = new_progress_percent
                progress_bar_length = 30
                progress_bar = "‚ñà" * int(progress_percent / (100 / progress_bar_length)) + " " * (
                        progress_bar_length - int(progress_percent / (100 / progress_bar_length)))
                progress_message_text = f"üîç –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ: {progress_percent}%\n[{progress_bar}]"
                await bot.edit_message_text(chat_id=progress_message.chat.id, message_id=progress_message.message_id,
                                            text=progress_message_text)
    if files_checked == 0:
        await message.answer("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.")
    else:
        await message.answer("‚úÖ –ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω.")


async def process_file(file_path, search_text, message):
    async with aiofiles.open(file_path, mode='r', encoding='utf-8', errors='ignore') as file:
        found = False
        async for line in file:
            if search_text in line:
                await message.answer(f"üíæ –ù–∞–π–¥–µ–Ω–æ –≤: {file_path}\nüìÑ –°—Ç—Ä–æ–∫–∞: {line.strip()}", reply_markup=main_keyboard())
                await asyncio.sleep(0.1)
                found = True


@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ —É—Ç–µ—á–∫–∞–º. –ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫.",
                         reply_markup=main_keyboard())


@dp.message_handler(lambda message: message.text == 'üîç –ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫', state="*")
async def start_search(message: types.Message):
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ç–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞.", reply_markup=main_keyboard())


@dp.message_handler(lambda message: message.text.startswith('+'))
async def handle_phone_number(message: types.Message):
    phone_number = message.text.strip()
    await process_phone_number(phone_number, message)


async def process_phone_number(phone_number, message):
    try:
        parsed_number = pnumb.parse(phone_number, None)
        location = geocoder.description_for_number(parsed_number, "en")
        isp = carrier.name_for_number(parsed_number, "en")
        tz = timezone.time_zones_for_number(parsed_number)

        is_valid_number = pnumb.is_valid_number(parsed_number)
        is_possible_number = pnumb.is_possible_number(parsed_number)
        formatted_number = pnumb.format_number(parsed_number, pnumb.PhoneNumberFormat.INTERNATIONAL)
        formatted_number_for_mobile = pnumb.format_number_for_mobile_dialing(parsed_number, "ID", with_formatting=True)
        number_type = pnumb.number_type(parsed_number)
        region_code = pnumb.region_code_for_number(parsed_number)
        timezoneF = ', '.join(tz)

        info = (
            f"<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–æ–º–µ—Ä–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞üìû :</b>\n"
            f"–õ–æ–∫–∞—Ü–∏—è: {location}\n"
            f"–ö–æ–¥ —Ä–µ–≥–∏–æ–Ω–∞:‚òé {region_code}\n"
            f"–í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–æ–Ω–∞üïõ: {timezoneF}\n"
            f"–û–ø–µ—Ä–∞—Ç–æ—Äüì°: {isp}\n"
            f"–í–∞–ª–∏–¥–Ω–æ—Å—Ç—å –Ω–æ–º–µ—Ä–∞: {is_valid_number}\n"
            f"–í–æ–∑–º–æ–∂–Ω—ã–π –Ω–æ–º–µ—Ä: {is_possible_number}\n"
            f"–ò–Ω—Ç–µ—Ä–Ω–∞—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: {formatted_number}\n"
            f"–ú–æ–±–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: {formatted_number_for_mobile}\n"
            f"–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä: {parsed_number.national_number}\n"
            f"E164 —Ñ–æ—Ä–º–∞—Ç: {pnumb.format_number(parsed_number, pnumb.PhoneNumberFormat.E164)}\n"
            f"–°—Ç—Ä–∞–Ω—ã –∫–æ–¥: {parsed_number.country_code}\n"
            f"–õ–æ–∫–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä: {parsed_number.national_number}\n"
        )

        if number_type == pnumb.PhoneNumberType.MOBILE:
            info += "–¢–∏–ø: –≠—Ç–æ –º–æ–±–∏–ª—å–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω\n"
        elif number_type == pnumb.PhoneNumberType.FIXED_LINE:
            info += "–¢–∏–ø: –≠—Ç–æ —Å—Ç–∞—Ü–∏–æ–Ω–∞—Ä–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω\n"
        else:
            info += "–¢–∏–ø: –î—Ä—É–≥–æ–π —Ç–∏–ø –Ω–æ–º–µ—Ä–∞ (–õ–∏–±–æ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π, –ª–∏–±–æ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –ª–∏–±–æ –≤–≤–µ–¥–µ–Ω –Ω–µ–≤–µ—Ä–Ω–æ)\n"

        await message.answer(info, parse_mode=ParseMode.HTML, reply_markup=main_keyboard())
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.",
                             reply_markup=main_keyboard())


email_domains = ['gmail.com', 'inbox.ru', 'mail.ru', 'rambler.ru']


@dp.message_handler(lambda message: message.text and '@' in message.text and all(domain not in message.text for domain in email_domains), state="*")
async def handle_username_search(message: types.Message):
    text = message.text
    username = text.split("@")[-1].strip()
    await search_social_media(message, username)


async def search_social_media(message: types.Message, username: str):
    links = {
            'instagram': 'https://www.instagram.com/{}',
            'facebook': 'https://www.facebook.com/{}',
            'twitter': 'https://www.twitter.com/{}',
            'youtube': 'https://www.youtube.com/{}',
            'blogger': 'https://{}.blogspot.com',
            'reddit': 'https://www.reddit.com/user/{}',
            'pinterest': 'https://www.pinterest.com/{}',
            'github': 'https://www.github.com/{}',
            'tumblr': 'https://{}.tumblr.com',
            'flickr': 'https://www.flickr.com/people/{}',
            'vimeo': 'https://vimeo.com/{}',
            'soundcloud': 'https://soundcloud.com/{}',
            'disqus': 'https://disqus.com/{}',
            'medium': 'https://medium.com/@{}',
            'deviantart': 'https://{}.deviantart.com',
            'vk': 'https://vk.com/{}',
            'about.me': 'https://about.me/{}',
            'imgur': 'https://imgur.com/user/{}',
            'slideshare': 'https://slideshare.net/{}',
            'spotify': 'https://open.spotify.com/user/{}',
            'scribd': 'https://www.scribd.com/{}',
            'badoo': 'https://www.badoo.com/en/{}',
            'patreon': 'https://www.patreon.com/{}',
            'XXX.ru(porn)': 'https://www.xv-ru.com/{}',
            'bitbucket': 'https://bitbucket.org/{}',
            'dailymotion': 'https://www.dailymotion.com/{}',
            'etsy': 'https://www.etsy.com/shop/{}',
            'cashme': 'https://cash.me/{}',
            'behance': 'https://www.behance.net/{}',
            'goodreads': 'https://www.goodreads.com/{}',
            'instructables': 'https://www.instructables.com/member/{}',
            'keybase': 'https://keybase.io/{}',
            'kongregate': 'https://kongregate.com/accounts/{}',
            'livejournal': 'https://{}.livejournal.com',
            'angellist': 'https://angel.co/{}',
            'last.fm': 'https://last.fm/user/{}',
            'dribbble': 'https://dribbble.com/{}',
            'codecademy': 'https://www.codecademy.com/{}',
            'gravatar': 'https://en.gravatar.com/{}',
            'foursquare': 'https://foursquare.com/{}',
            'gumroad': 'https://www.gumroad.com/{}',
            'newgrounds': 'https://{}.newgrounds.com',
            'wattpad': 'https://www.wattpad.com/user/{}',
            'canva': 'https://www.canva.com/{}',
            'creativemarket': 'https://creativemarket.com/{}',
            'trakt': 'https://www.trakt.tv/users/{}',
            '500px': 'https://500px.com/{}',
            'buzzfeed': 'https://buzzfeed.com/{}',
            'tripadvisor': 'https://tripadvisor.com/members/{}',
            'hubpages': 'https://{}.hubpages.com',
            'contently': 'https://{}.contently.com',
            'houzz': 'https://houzz.com/user/{}',
            'blip.fm': 'https://blip.fm/{}',
            'wikipedia': 'https://www.wikipedia.org/wiki/User:{}',
            'codementor': 'https://www.codementor.io/{}',
            'reverbnation': 'https://www.reverbnation.com/{}',
            'designspiration65': 'https://www.designspiration.net/{}',
            'bandcamp': 'https://www.bandcamp.com/{}',
            'colourlovers': 'https://www.colourlovers.com/love/{}',
            'ifttt': 'https://www.ifttt.com/p/{}',
            'slack': 'https://{}.slack.com',
            'okcupid': 'https://www.okcupid.com/profile/{}',
            'trip': 'https://www.trip.skyscanner.com/user/{}',
            'ello': 'https://ello.co/{}',
            'hackerone': 'https://hackerone.com/{}',
            'freelancer': 'https://www.freelancer.com/u/{}',
            'academia': 'https://independent.academia.edu/{}',
            'admireme': 'https://admireme.vip/{}',
            'airlinepilot': 'https://airlinepilot.life/u/{}',
            'airbit': 'https://airbit.com/{}',
            'alik': 'https://www.alik.cz/{}',
            'allthingsworn': 'https://www.allthingsworn.com/profile/{}',
            'allmylinks': 'https://allmylinks.com/{}',
            'aminoapps': 'https://aminoapps.com/u/{}',
            'aniworld': 'https://aniworld.to/user/profil/{}',
            'appledeveloperforums': 'https://developer.apple.com/forums/profile/{}',
            'archiveofourown': 'https://archiveofourown.org/users/{}',
            'artstation': 'https://www.artstation.com/{}',
            'asciinema': 'https://asciinema.org/~{}',
            'askfedora': 'https://ask.fedoraproject.org/u/{}',
            'askfm': 'https://ask.fm/{}',
            'audiojungle': 'https://audiojungle.net/user/{}',
            'autofrage': 'https://www.autofrage.net/nutzer/{}',
            'avizo': 'https://www.avizo.cz/{}',
            'bazar': 'https://www.bazar.cz/{}',
            'bezuzyteczna': 'https://bezuzyteczna.pl/uzytkownicy/{}',
            'biggerpockets': 'https://www.biggerpockets.com/users/{}',
            'dangerousthingsforum': 'https://forum.dangerousthings.com/u/{}',
            'bitwardencommunity': 'https://community.bitwarden.com/u/{}',
            'blipfoto': 'https://www.blipfoto.com/{}',
            'boothpm': 'https://{}.booth.pm/',
            'behance2': 'https://www.behance.net/{}',
            'bodyspace': 'https://bodyspace.bodybuilding.com/{}',
            'bongacams': 'https://pt.bongacams.com/profile/{}',
            'careerhabr': 'https://career.habr.com/{}',
            'chaturbate': 'https://chaturbate.com/{}',
            'chesscom': 'https://www.chess.com/member/{}',
            'codecademy2': 'https://www.codecademy.com/profiles/{}',
            'cryptomatorcommunity': 'https://community.cryptomator.org/u/{}',
            'duolingo': 'https://www.duolingo.com/profile/{}'
    }

    found_results = await verify_username(username, links)
    if found_results:
        results_message = "<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –≤ —Å–ª–µ–¥—É—é—â–∏—Ö —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç—è—Ö:</b>\n"
        for social_network, url in found_results:
            results_message += f"{social_network}: {url}\n"
        await message.answer(results_message, parse_mode=types.ParseMode.HTML, reply_markup=main_keyboard())
    else:
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç—è—Ö.", reply_markup=main_keyboard())


async def verify_username(username, links):
    async with aiohttp.ClientSession() as session:
        tasks = [check_status(session, social_network, url, username) for social_network, url in links.items()]
        return [result for result in await asyncio.gather(*tasks) if result]


async def check_status(session, social_network, url, username):
    try:
        async with session.get(url.format(username)) as resp:
            if resp.status == 200:
                return (social_network, url.format(username))
    except aiohttp.ClientError:
        pass
    return None
IP_REGEX = re.compile(r"\b(?:[0-9]{1,3}\.){3}[0-9]{1,3}\b")

# –ù–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ–∏—Å–∫–∞ IP-–∞–¥—Ä–µ—Å–æ–≤
@dp.message_handler(lambda message: IP_REGEX.search(message.text))
async def handle_ip_message(message: types.Message):
    # –ò–∑–≤–ª–µ–∫–∞–µ–º IP-–∞–¥—Ä–µ—Å –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    targetip = IP_REGEX.search(message.text).group()
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ IP-–∞–¥—Ä–µ—Å–µ
    info = await get_ip_info(targetip)
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await message.answer(info)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ IP-–∞–¥—Ä–µ—Å–µ
async def get_ip_info(targetip):
    r = requests.get("http://ip-api.com/json/" + targetip)
    result = ""
    if r.status_code == 200:
        result += f"\n[*] –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± IP-–∞–¥—Ä–µ—Å–µ:\n"
        if r.json()['status'] == 'success':
            result += f"[*] –°—Ç–∞—Ç—É—Å         : {r.status_code}\n"
            result += f"[*] –°—Ç–∞—Ç—É—Å         : {r.json()['status']}\n"
            result += f"[*] –¶–µ–ª–µ–≤–æ–π IP-–∞–¥—Ä–µ—Å: {r.json()['query']}\n"
            result += f"[*] –°—Ç—Ä–∞–Ω–∞         : {r.json()['country']}\n"
            result += f"[*] –ö–æ–¥ —Å—Ç—Ä–∞–Ω—ã     : {r.json()['countryCode']}\n"
            result += f"[*] –ì–æ—Ä–æ–¥          : {r.json()['city']}\n"
            result += f"[*] –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å   : {r.json()['timezone']}\n"
            result += f"[*] –ù–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞: {r.json()['regionName']}\n"
            result += f"[*] –†–µ–≥–∏–æ–Ω         : {r.json()['region']}\n"
            result += f"[*] –ü–æ—á—Ç–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å: {r.json()['zip']}\n"
            result += f"[*] –®–∏—Ä–æ—Ç–∞         : {r.json()['lat']}\n"
            result += f"[*] –î–æ–ª–≥–æ—Ç–∞        : {r.json()['lon']}\n"
            result += f"[*] –ü—Ä–æ–≤–∞–π–¥–µ—Ä      : {r.json()['isp']}\n"
            result += f"[*] –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è    : {r.json()['org']}\n"
            result += f"[*] AS             : {r.json()['as']}\n"
            result += f"[*] –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ  : {r.json()['lat']}, {r.json()['lon']}\n"
            result += f"[*] Google –ö–∞—Ä—Ç–∞   : https://maps.google.com/?q={r.json()['lat']},{r.json()['lon']}\n"
        elif r.json()['status'] == 'fail':
            result += f"[*] –°—Ç–∞—Ç—É—Å         : {r.status_code}\n"
            result += f"[*] –°—Ç–∞—Ç—É—Å         : {r.json()['status']}\n"
            result += f"[*] –°–æ–æ–±—â–µ–Ω–∏–µ      : {r.json()['message']}\n"
            if r.json()['message'] == 'invalid query':
                result += f"\n[!] {targetip} - —ç—Ç–æ –Ω–µ–≤–µ—Ä–Ω—ã–π IP-–∞–¥—Ä–µ—Å, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π IP-–∞–¥—Ä–µ—Å.\n"
            elif r.json()['message'] == 'private range':
                result += f"\n[!] {targetip} - —ç—Ç–æ —á–∞—Å—Ç–Ω—ã–π IP-–∞–¥—Ä–µ—Å, –µ–≥–æ –Ω–µ–ª—å–∑—è –ø—Ä–æ—Å–ª–µ–¥–∏—Ç—å.\n"
            elif r.json()['message'] == 'reserved range':
                result += f"\n[!] {targetip} - —ç—Ç–æ –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–π IP-–∞–¥—Ä–µ—Å, –µ–≥–æ –Ω–µ–ª—å–∑—è –ø—Ä–æ—Å–ª–µ–¥–∏—Ç—å.\n"
            else:
                result += f"\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.\n"
    return result

@dp.message_handler(lambda message: message.text == '‚õî –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–∏—Å–∫', state="*")
async def stop_search(message: types.Message):
    await message.answer("–ü–æ–∏—Å–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.", reply_markup=main_keyboard())


@dp.message_handler(lambda message: message.text and message.text not in ['üîç –ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫', '‚õî –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–∏—Å–∫'],
                    state="*")
async def search_files(message: types.Message):
    directory_to_search = "F:\\fordatabase"
    search_text = message.text
    await search_directory(directory_to_search, search_text, message)
    log_search(message.from_user.username, search_text)


def log_search(username, search_text):
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    with open("searchlog.txt", "a") as log_file:
        log_file.write(f"{timestamp} - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} —Å–¥–µ–ª–∞–ª –∑–∞–ø—Ä–æ—Å: {search_text}\n")


def main_keyboard():
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(KeyboardButton('üîç –ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫'))
    keyboard.add(KeyboardButton('‚õî –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–∏—Å–∫'))
    return keyboard


if __name__ == '__main__':
    loop = asyncio.get_event_loop()
    try:
        loop.run_until_complete(dp.start_polling())
    except KeyboardInterrupt:
        pass
    finally:
        loop.run_until_complete(dp.stop_polling())
        loop.close()
